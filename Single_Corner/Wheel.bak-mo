within ABS.Single_Corner;

model Wheel "1-dim. model of a rolling wheel with longitudinal slip at the base and without inertia "
  extends Rotational.Interfaces.PartialElementaryRotationalToTranslational;
  parameter SI.Length radius(final min = 0);
  parameter SI.Mass m=400;
  final constant Real eps=1e8*Modelica.Constants.eps;
  SI.AngularVelocity wR;
  SI.Velocity vT;
  SI.Velocity vP;
  SI.Velocity den(start=eps);
  //Boolean braking(fixed=true,start=false);
  //Boolean accelerating(fixed=true,start=false); //initial state is unknown
  Interfaces.ContactPoint_a contactPoint_a annotation(
    Placement(transformation(origin = {-14, -92}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {0, -80}, extent = {{-20, -20}, {20, 20}})));
  parameter Boolean useDynLoad = false "enables the dynamic load input";
  Modelica.Blocks.Interfaces.RealInput dynLoad if useDynLoad "input for dynamic load" annotation(
    Placement(transformation(origin = {8, 64}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-30, 90}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  protected
  SI.Force internalL;

equation

  wR = der(flangeR.phi - internalSupportR.phi);
  vT = der(flangeT.s - internalSupportT.s);
  vT + vP - wR*radius = 0; //sign convention: wR positive if rolling to the right, like in the std library

  //den for slip normalization
  den = smooth(0, if noEvent(abs(vT)>abs(wR*radius)) then abs(vT) else abs(wR*radius));

  //slip is positive if accelerating (second case, vP=wR*radius-vT > 0)
  contactPoint_a.slip = smooth(0,if noEvent(den>eps) then vP/den else vP/eps);
  
  //force and torque balance
  contactPoint_a.f + flangeT.f = 0;
  flangeR.tau - contactPoint_a.f*radius = 0;
  
  //internalL+contactPoint_a.l=0;
  
  if not useDynLoad then
    internalL=m*g;
  end if;
  
  
  


  
  annotation(
    Icon(graphics = {Ellipse(extent = {{-80, 80}, {80, -80}})}),
  Diagram(coordinateSystem(extent = {{-120, 20}, {140, -140}})));
end Wheel;